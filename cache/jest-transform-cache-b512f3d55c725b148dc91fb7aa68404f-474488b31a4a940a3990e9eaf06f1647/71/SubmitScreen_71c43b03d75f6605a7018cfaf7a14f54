0e8e29826e3c06023110a71861682f2f
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _reactNative = require("react-native");
var _react = _interopRequireWildcard(require("react"));
var _QuizContext = require("./QuizContext");
var _reactNativePieChart = _interopRequireDefault(require("react-native-pie-chart"));
var _native = require("@react-navigation/native");
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function cov_1b3sef8ow0() {
  var path = "D:\\quizapp-reactnative\\Apps\\SubmitScreen.tsx";
  var hash = "e28c2d39b3b946fd368dcaeaa431a55fc2682888";
  var global = new Function("return this")();
  var gcv = "__coverage__";
  var coverageData = {
    path: "D:\\quizapp-reactnative\\Apps\\SubmitScreen.tsx",
    statementMap: {
      "0": {
        start: {
          line: 7,
          column: 21
        },
        end: {
          line: 55,
          column: 1
        }
      },
      "1": {
        start: {
          line: 8,
          column: 21
        },
        end: {
          line: 8,
          column: 68
        }
      },
      "2": {
        start: {
          line: 10,
          column: 4
        },
        end: {
          line: 10,
          column: 27
        }
      },
      "3": {
        start: {
          line: 11,
          column: 23
        },
        end: {
          line: 11,
          column: 32
        }
      },
      "4": {
        start: {
          line: 12,
          column: 20
        },
        end: {
          line: 12,
          column: 41
        }
      },
      "5": {
        start: {
          line: 13,
          column: 22
        },
        end: {
          line: 13,
          column: 44
        }
      },
      "6": {
        start: {
          line: 15,
          column: 4
        },
        end: {
          line: 15,
          column: 16
        }
      },
      "7": {
        start: {
          line: 16,
          column: 4
        },
        end: {
          line: 16,
          column: 32
        }
      },
      "8": {
        start: {
          line: 18,
          column: 2
        },
        end: {
          line: 54,
          column: 4
        }
      },
      "9": {
        start: {
          line: 57,
          column: 15
        },
        end: {
          line: 86,
          column: 2
        }
      }
    },
    fnMap: {
      "0": {
        name: "(anonymous_0)",
        decl: {
          start: {
            line: 7,
            column: 21
          },
          end: {
            line: 7,
            column: 22
          }
        },
        loc: {
          start: {
            line: 7,
            column: 27
          },
          end: {
            line: 55,
            column: 1
          }
        },
        line: 7
      },
      "1": {
        name: "restartQuiz",
        decl: {
          start: {
            line: 14,
            column: 11
          },
          end: {
            line: 14,
            column: 22
          }
        },
        loc: {
          start: {
            line: 14,
            column: 25
          },
          end: {
            line: 17,
            column: 3
          }
        },
        line: 14
      }
    },
    branchMap: {},
    s: {
      "0": 0,
      "1": 0,
      "2": 0,
      "3": 0,
      "4": 0,
      "5": 0,
      "6": 0,
      "7": 0,
      "8": 0,
      "9": 0
    },
    f: {
      "0": 0,
      "1": 0
    },
    b: {},
    _coverageSchema: "1a1c01bbd47fc00a2c39e90264f33305004495a9",
    hash: "e28c2d39b3b946fd368dcaeaa431a55fc2682888"
  };
  var coverage = global[gcv] || (global[gcv] = {});
  if (!coverage[path] || coverage[path].hash !== hash) {
    coverage[path] = coverageData;
  }
  var actualCoverage = coverage[path];
  {
    cov_1b3sef8ow0 = function () {
      return actualCoverage;
    };
  }
  return actualCoverage;
}
cov_1b3sef8ow0();
cov_1b3sef8ow0().s[0]++;
var SubmitScreen = function SubmitScreen() {
  cov_1b3sef8ow0().f[0]++;
  var navigation = (cov_1b3sef8ow0().s[1]++, (0, _native.useNavigation)());
  var _ref = (cov_1b3sef8ow0().s[2]++, (0, _react.useContext)(_QuizContext.QuizContext)),
    score = _ref.score,
    setScore = _ref.setScore,
    selectedValue = _ref.selectedValue,
    name = _ref.name,
    email = _ref.email,
    phone = _ref.phone;
  var wrongAnswers = (cov_1b3sef8ow0().s[3]++, 9 - score);
  var chartData = (cov_1b3sef8ow0().s[4]++, [wrongAnswers, score]);
  var chartColors = (cov_1b3sef8ow0().s[5]++, ['#A20021', '#B0FF92']);
  function restartQuiz() {
    cov_1b3sef8ow0().f[1]++;
    cov_1b3sef8ow0().s[6]++;
    setScore(0);
    cov_1b3sef8ow0().s[7]++;
    navigation.navigate('Home');
  }
  cov_1b3sef8ow0().s[8]++;
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: styles.container,
    testID: "scoreContainer",
    children: [(0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.pieStyling,
      children: (0, _jsxRuntime.jsx)(_reactNativePieChart.default, {
        widthAndHeight: 200,
        series: chartData,
        sliceColor: chartColors
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: styles.statsView,
      children: [(0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: styles.textStyle,
        testID: "score",
        children: ["Score: ", score]
      }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: styles.textStyle,
        testID: "selectedStream",
        children: ["Quiz Stream: ", selectedValue]
      }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: styles.textStyle,
        testID: "name",
        children: ["Name: ", name]
      }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: styles.textStyle,
        testID: "mail",
        children: ["Mail: ", email]
      }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
        style: styles.textStyle,
        testID: "phoneNo",
        children: ["Phone Number: ", phone]
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: styles.buttonStyling,
      children: (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: {
          marginHorizontal: 10
        },
        children: (0, _jsxRuntime.jsx)(_reactNative.Button, {
          title: "Re-enter Details",
          onPress: restartQuiz,
          testID: "restartQuiz"
        })
      })
    })]
  });
};
var _default = SubmitScreen;
exports.default = _default;
var styles = (cov_1b3sef8ow0().s[9]++, _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'white'
  },
  textStyle: {
    color: 'black',
    fontSize: 19,
    textAlign: 'center',
    backgroundColor: '#0496FF',
    padding: 5,
    marginTop: 15
  },
  pieStyling: {
    position: 'absolute',
    top: 20
  },
  statsView: {
    position: 'relative',
    top: 50
  },
  buttonStyling: {
    display: 'flex',
    flexDirection: 'row',
    position: 'absolute',
    bottom: 30
  }
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,