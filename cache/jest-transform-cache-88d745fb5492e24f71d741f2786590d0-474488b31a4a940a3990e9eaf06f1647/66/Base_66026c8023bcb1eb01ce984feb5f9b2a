36e4dfc09996766a10ae38d9233a2bfa
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Base;
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _native = require("@react-navigation/native");
var _axios = _interopRequireDefault(require("axios"));
var _jsxRuntime = require("react/jsx-runtime");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function Base() {
  var apiKey = '161ed901';
  var _useState = (0, _react.useState)(null),
    _useState2 = (0, _slicedToArray2.default)(_useState, 2),
    results = _useState2[0],
    setResults = _useState2[1];
  var _useState3 = (0, _react.useState)('movie'),
    _useState4 = (0, _slicedToArray2.default)(_useState3, 2),
    selectedTab = _useState4[0],
    setSelected = _useState4[1];
  var _useState5 = (0, _react.useState)(''),
    _useState6 = (0, _slicedToArray2.default)(_useState5, 2),
    search = _useState6[0],
    setSearch = _useState6[1];
  var _useState7 = (0, _react.useState)('0'),
    _useState8 = (0, _slicedToArray2.default)(_useState7, 2),
    season = _useState8[0],
    setSeason = _useState8[1];
  var _useState9 = (0, _react.useState)('0'),
    _useState10 = (0, _slicedToArray2.default)(_useState9, 2),
    episode = _useState10[0],
    setEpisode = _useState10[1];
  var navigation = (0, _native.useNavigation)();
  var handleSubmit = function () {
    var _ref = (0, _asyncToGenerator2.default)(function* () {
      try {
        var response;
        if (selectedTab === 'movie') {
          response = yield _axios.default.get("https://www.omdbapi.com/?t=" + search + "&apiKey=" + apiKey);
        } else if (selectedTab === 'tv-show') {
          if (season > '0') {
            response = yield _axios.default.get("https://www.omdbapi.com/?t=" + search + "&Season=" + season + "&apiKey=" + apiKey);
            if (episode > '0') {
              var episodeResponse = yield _axios.default.get("https://www.omdbapi.com/?t=" + search + "&Season=" + season + "&Episode=" + episode + "&apiKey=" + apiKey);
              setResults(episodeResponse.data);
              return;
            }
          } else {
            response = yield _axios.default.get("https://www.omdbapi.com/?t=" + search + "&apiKey=" + apiKey);
          }
        }
        setResults(response.data);
      } catch (error) {
        console.error('Error fetching search results:', error);
      }
    });
    return function handleSubmit() {
      return _ref.apply(this, arguments);
    };
  }();
  var handleTabChange = function handleTabChange(newValue) {
    setSelected(newValue);
  };
  var handleNavigation = function handleNavigation() {
    navigation.navigate('Details', {
      state: results
    });
  };
  return (0, _jsxRuntime.jsxs)(_reactNative.View, {
    style: {
      padding: 10
    },
    children: [results && (0, _jsxRuntime.jsxs)(_reactNative.TouchableOpacity, {
      onPress: handleNavigation,
      testID: "movie-card",
      style: {
        maxWidth: 400,
        margin: 'auto',
        borderRadius: 16,
        backgroundColor: '#f3f3f3',
        overflow: 'hidden',
        marginBottom: 20
      },
      children: [(0, _jsxRuntime.jsx)(_reactNative.Image, {
        source: {
          uri: results.Poster
        },
        style: {
          height: 200,
          borderRadius: 16
        }
      }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: {
          padding: 10
        },
        children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: {
            fontSize: 24
          },
          children: results.Title
        }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: {
            fontSize: 20
          },
          children: results.Year
        }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: {
            fontSize: 20
          },
          children: ["Rating: ", results.Rated]
        })]
      })]
    }), (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: {
        borderTopWidth: 1,
        borderBottomWidth: 1,
        borderColor: 'black'
      },
      children: (0, _jsxRuntime.jsxs)(_reactNative.ScrollView, {
        horizontal: true,
        children: [(0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          onPress: function onPress() {
            return handleTabChange('movie');
          },
          style: [styles.tabButton, selectedTab === 'movie' && styles.selectedTab],
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.tabText,
            children: "Movie"
          })
        }), (0, _jsxRuntime.jsx)(_reactNative.TouchableOpacity, {
          onPress: function onPress() {
            return handleTabChange('tv-show');
          },
          style: [styles.tabButton, selectedTab === 'tv-show' && styles.selectedTab],
          children: (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.tabText,
            children: "TV Show"
          })
        })]
      })
    }), (0, _jsxRuntime.jsxs)(_reactNative.View, {
      style: {
        marginTop: 20
      },
      children: [(0, _jsxRuntime.jsx)(_reactNative.TextInput, {
        placeholder: "Search TV Show or Movie",
        onChangeText: setSearch,
        value: search,
        style: {
          borderWidth: 1,
          padding: 10
        }
      }), selectedTab === 'tv-show' && (0, _jsxRuntime.jsxs)(_jsxRuntime.Fragment, {
        children: [(0, _jsxRuntime.jsx)(_reactNative.TextInput, {
          placeholder: "Season",
          onChangeText: setSeason,
          value: season,
          keyboardType: "numeric",
          style: {
            borderWidth: 1,
            padding: 10,
            marginTop: 10
          }
        }), (0, _jsxRuntime.jsx)(_reactNative.TextInput, {
          placeholder: "Episode",
          onChangeText: setEpisode,
          value: episode,
          keyboardType: "numeric",
          style: {
            borderWidth: 1,
            padding: 10,
            marginTop: 10
          }
        })]
      }), (0, _jsxRuntime.jsx)(_reactNative.View, {
        style: {
          marginTop: 20
        },
        children: (0, _jsxRuntime.jsx)(_reactNative.Button, {
          title: "Submit",
          onPress: handleSubmit
        })
      })]
    })]
  });
}
var styles = _reactNative.StyleSheet.create({
  tabButton: {
    marginRight: 10,
    paddingHorizontal: 10,
    paddingVertical: 5,
    borderRadius: 5
  },
  selectedTab: {
    backgroundColor: '#4477CE'
  },
  tabText: {
    fontSize: 16
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,