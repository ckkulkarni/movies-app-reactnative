f0747407a01663f8a1d5444ad5b0fdd2
_getJestObj().mock('axios');
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactNative = require("@testing-library/react-native");
require("react-native-get-random-values");
var _uuid = require("uuid");
var _jestCucumber = require("jest-cucumber");
var _native = require("@react-navigation/native");
var _Base = _interopRequireDefault(require("./../../Base"));
var _axios = _interopRequireDefault(require("axios"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var uuid = (0, _uuid.v4)();
var feature = (0, _jestCucumber.loadFeature)('Apps/features/base.feature');
var navigation = (0, _native.useNavigation)();
var screen;
(0, _jestCucumber.defineFeature)(feature, function (test) {
  beforeEach(function () {
    screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {}));
  });
  test('Search for a movie', function (_ref) {
    var given = _ref.given,
      when = _ref.when,
      and = _ref.and,
      then = _ref.then;
    given('I am on the search page', function () {
      expect(screen).toBeTruthy();
    });
    when('I select the "Movie" tab', function () {
      var movieTab = screen.getByTestId('movie-tab');
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.press(movieTab);
      });
    });
    and('I enter "Manmadhudu" in the search input and hit submit', function () {
      var searchBar = screen.getByTestId('search-movie');
      var submitButton = screen.getByTestId('submit-button');
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.changeText(searchBar, 'Manmadhudu');
        _reactNative.fireEvent.press(submitButton);
      });
      _axios.default.get.mockResolvedValueOnce({
        data: {
          Title: 'Manmadhudu',
          Year: '2002',
          Rated: 'N/A',
          Released: '20 Dec 2002',
          Runtime: '142 min',
          Genre: 'Comedy, Romance',
          Director: 'Vijay K. Bhaskar',
          Writer: 'Vijay K. Bhaskar, Trivikram Srinivas',
          Actors: 'Nagarjuna Akkineni, Sonali Bendre, Anshu',
          Plot: 'A misogynist is forced by circumstances to work with a woman.',
          Language: 'Telugu',
          Poster: 'https://m.media-amazon.com/images/M/MV5BOTE1M2IwMzktNjI1Mi00ZTFkLTg4MmMtNTZmMjk4YTdhODlkXkEyXkFqcGdeQXVyNjE2NTgxOTE@._V1_SX300.jpg',
          Ratings: [{
            Source: 'Internet Movie Database',
            Value: '8.3/10'
          }],
          imdbRating: '8.3',
          imdbVotes: '4,096',
          imdbID: 'tt0355742'
        }
      });
    });
    then('I should see the search results card', function () {
      var movieTitle = screen.getByText('Manmahudu');
    });
    and('I should be able to click the card to view more details', function () {});
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VOYXZpZ2F0aW9uIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwibmF2aWdhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl91dWlkIiwiX2plc3RDdWN1bWJlciIsIl9uYXRpdmUiLCJfQmFzZSIsIl9heGlvcyIsIl9qc3hSdW50aW1lIiwiX3JlcXVpcmUiLCJ1dWlkIiwidXVpZHY0IiwiZmVhdHVyZSIsImxvYWRGZWF0dXJlIiwibmF2aWdhdGlvbiIsInNjcmVlbiIsImRlZmluZUZlYXR1cmUiLCJ0ZXN0IiwiYmVmb3JlRWFjaCIsInJlbmRlciIsImpzeCIsImRlZmF1bHQiLCJfcmVmIiwiZ2l2ZW4iLCJ3aGVuIiwiYW5kIiwidGhlbiIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJtb3ZpZVRhYiIsImdldEJ5VGVzdElkIiwiYWN0IiwiZmlyZUV2ZW50IiwicHJlc3MiLCJzZWFyY2hCYXIiLCJzdWJtaXRCdXR0b24iLCJjaGFuZ2VUZXh0IiwiYXhpb3MiLCJnZXQiLCJtb2NrUmVzb2x2ZWRWYWx1ZU9uY2UiLCJkYXRhIiwiVGl0bGUiLCJZZWFyIiwiUmF0ZWQiLCJSZWxlYXNlZCIsIlJ1bnRpbWUiLCJHZW5yZSIsIkRpcmVjdG9yIiwiV3JpdGVyIiwiQWN0b3JzIiwiUGxvdCIsIkxhbmd1YWdlIiwiUG9zdGVyIiwiUmF0aW5ncyIsIlNvdXJjZSIsIlZhbHVlIiwiaW1kYlJhdGluZyIsImltZGJWb3RlcyIsImltZGJJRCIsIm1vdmllVGl0bGUiLCJnZXRCeVRleHQiXSwic291cmNlcyI6WyJiYXNlLnN0ZXBzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2FjdCwgZmlyZUV2ZW50LCByZW5kZXIsIHdhaXRGb3J9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcclxuaW1wb3J0ICdyZWFjdC1uYXRpdmUtZ2V0LXJhbmRvbS12YWx1ZXMnO1xyXG5pbXBvcnQge3Y0IGFzIHV1aWR2NH0gZnJvbSAndXVpZCc7XHJcbmltcG9ydCB7bG9hZEZlYXR1cmUsIGRlZmluZUZlYXR1cmV9IGZyb20gJ2plc3QtY3VjdW1iZXInO1xyXG5pbXBvcnQge1ZpZXcsIFRleHRJbnB1dCwgQnV0dG9ufSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQge3VzZU5hdmlnYXRpb259IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZSc7XHJcbmltcG9ydCB7TmF0aXZlU3RhY2tOYXZpZ2F0aW9uUHJvcH0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlLXN0YWNrJztcclxuaW1wb3J0IEJhc2UgZnJvbSAnLi8uLi8uLi9CYXNlJztcclxuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcclxuY29uc3QgdXVpZCA9IHV1aWR2NCgpO1xyXG5jb25zdCBmZWF0dXJlID0gbG9hZEZlYXR1cmUoJ0FwcHMvZmVhdHVyZXMvYmFzZS5mZWF0dXJlJyk7XHJcbmNvbnN0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0aW9uPE5hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3A8YW55Pj4oKTtcclxuamVzdC5tb2NrKCdheGlvcycpO1xyXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgdXNlTmF2aWdhdGlvbjogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XHJcbiAgICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXHJcbiAgICB9KSxcclxuICB9O1xyXG59KTtcclxubGV0IHNjcmVlbjogYW55O1xyXG5kZWZpbmVGZWF0dXJlKGZlYXR1cmUsIHRlc3QgPT4ge1xyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgc2NyZWVuID0gcmVuZGVyKDxCYXNlIC8+KTtcclxuICB9KTtcclxuICB0ZXN0KCdTZWFyY2ggZm9yIGEgbW92aWUnLCAoe2dpdmVuLCB3aGVuLCBhbmQsIHRoZW59KSA9PiB7XHJcbiAgICBnaXZlbignSSBhbSBvbiB0aGUgc2VhcmNoIHBhZ2UnLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChzY3JlZW4pLnRvQmVUcnV0aHkoKTtcclxuICAgIH0pO1xyXG4gICAgd2hlbignSSBzZWxlY3QgdGhlIFwiTW92aWVcIiB0YWInLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IG1vdmllVGFiID0gc2NyZWVuLmdldEJ5VGVzdElkKCdtb3ZpZS10YWInKTtcclxuICAgICAgYWN0KCgpID0+IHtcclxuICAgICAgICBmaXJlRXZlbnQucHJlc3MobW92aWVUYWIpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgYW5kKCdJIGVudGVyIFwiTWFubWFkaHVkdVwiIGluIHRoZSBzZWFyY2ggaW5wdXQgYW5kIGhpdCBzdWJtaXQnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHNlYXJjaEJhciA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnc2VhcmNoLW1vdmllJyk7XHJcbiAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnc3VibWl0LWJ1dHRvbicpO1xyXG4gICAgICBhY3QoKCkgPT4ge1xyXG4gICAgICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KHNlYXJjaEJhciwgJ01hbm1hZGh1ZHUnKTtcclxuICAgICAgICBmaXJlRXZlbnQucHJlc3Moc3VibWl0QnV0dG9uKTtcclxuICAgICAgfSk7XHJcbiAgICAgIChheGlvcy5nZXQgYXMgamVzdC5Nb2NrKS5tb2NrUmVzb2x2ZWRWYWx1ZU9uY2Uoe1xyXG4gICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgIFRpdGxlOiAnTWFubWFkaHVkdScsXHJcbiAgICAgICAgICBZZWFyOiAnMjAwMicsXHJcbiAgICAgICAgICBSYXRlZDogJ04vQScsXHJcbiAgICAgICAgICBSZWxlYXNlZDogJzIwIERlYyAyMDAyJyxcclxuICAgICAgICAgIFJ1bnRpbWU6ICcxNDIgbWluJyxcclxuICAgICAgICAgIEdlbnJlOiAnQ29tZWR5LCBSb21hbmNlJyxcclxuICAgICAgICAgIERpcmVjdG9yOiAnVmlqYXkgSy4gQmhhc2thcicsXHJcbiAgICAgICAgICBXcml0ZXI6ICdWaWpheSBLLiBCaGFza2FyLCBUcml2aWtyYW0gU3Jpbml2YXMnLFxyXG4gICAgICAgICAgQWN0b3JzOiAnTmFnYXJqdW5hIEFra2luZW5pLCBTb25hbGkgQmVuZHJlLCBBbnNodScsXHJcbiAgICAgICAgICBQbG90OiAnQSBtaXNvZ3luaXN0IGlzIGZvcmNlZCBieSBjaXJjdW1zdGFuY2VzIHRvIHdvcmsgd2l0aCBhIHdvbWFuLicsXHJcbiAgICAgICAgICBMYW5ndWFnZTogJ1RlbHVndScsXHJcbiAgICAgICAgICBQb3N0ZXI6XHJcbiAgICAgICAgICAgICdodHRwczovL20ubWVkaWEtYW1hem9uLmNvbS9pbWFnZXMvTS9NVjVCT1RFMU0ySXdNemt0TmpJMU1pMDBaVEZrTFRnNE1tTXROVFptTWprNFlUZGhPRGxrWGtFeVhrRnFjR2RlUVhWeU5qRTJOVGd4T1RFQC5fVjFfU1gzMDAuanBnJyxcclxuICAgICAgICAgIFJhdGluZ3M6IFt7U291cmNlOiAnSW50ZXJuZXQgTW92aWUgRGF0YWJhc2UnLCBWYWx1ZTogJzguMy8xMCd9XSxcclxuICAgICAgICAgIGltZGJSYXRpbmc6ICc4LjMnLFxyXG4gICAgICAgICAgaW1kYlZvdGVzOiAnNCwwOTYnLFxyXG4gICAgICAgICAgaW1kYklEOiAndHQwMzU1NzQyJyxcclxuICAgICAgICB9LFxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoZW4oJ0kgc2hvdWxkIHNlZSB0aGUgc2VhcmNoIHJlc3VsdHMgY2FyZCcsICgpID0+IHtcclxuICAgICAgY29uc3QgbW92aWVUaXRsZSA9IHNjcmVlbi5nZXRCeVRleHQoJ01hbm1haHVkdScpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgYW5kKCdJIHNob3VsZCBiZSBhYmxlIHRvIGNsaWNrIHRoZSBjYXJkIHRvIHZpZXcgbW9yZSBkZXRhaWxzJywgKCkgPT4ge30p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