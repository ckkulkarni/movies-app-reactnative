3445f8c0b6cff251fdcb7083147beeb7
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactNative = require("@testing-library/react-native");
require("react-native-get-random-values");
var _uuid = require("uuid");
var _jestCucumber = require("jest-cucumber");
var _native = require("@react-navigation/native");
var _Base = _interopRequireDefault(require("./../../Base"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var uuid = (0, _uuid.v4)();
var feature = (0, _jestCucumber.loadFeature)('Apps/features/base.feature');
var navigation = (0, _native.useNavigation)();
var screen;
(0, _jestCucumber.defineFeature)(feature, function (test) {
  beforeEach(function () {
    screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {}));
  });
  test('Search for a movie', function (_ref) {
    var given = _ref.given,
      when = _ref.when,
      and = _ref.and,
      then = _ref.then;
    given('I am on the search page', function () {
      expect(screen).toBeTruthy();
    });
    when('I select the "Movie" tab', function () {
      var movieTab = screen.getByTestId('movie-tab');
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.press(movieTab);
      });
    });
    and('I enter "Manmadhudu" in the search input and hit submit', function () {
      var searchBar = screen.getByTestId('search-movie');
      var submitButton = screen.getByTestId('submit-button');
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.changeText(searchBar, 'Manmadhudu');
      });
    });
    then('I should see the search results card', function () {});
    and('I should be able to click the card to view more details', function () {});
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VOYXZpZ2F0aW9uIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwibmF2aWdhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl91dWlkIiwiX2plc3RDdWN1bWJlciIsIl9uYXRpdmUiLCJfQmFzZSIsIl9qc3hSdW50aW1lIiwiX3JlcXVpcmUiLCJ1dWlkIiwidXVpZHY0IiwiZmVhdHVyZSIsImxvYWRGZWF0dXJlIiwibmF2aWdhdGlvbiIsInNjcmVlbiIsImRlZmluZUZlYXR1cmUiLCJ0ZXN0IiwiYmVmb3JlRWFjaCIsInJlbmRlciIsImpzeCIsImRlZmF1bHQiLCJfcmVmIiwiZ2l2ZW4iLCJ3aGVuIiwiYW5kIiwidGhlbiIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJtb3ZpZVRhYiIsImdldEJ5VGVzdElkIiwiYWN0IiwiZmlyZUV2ZW50IiwicHJlc3MiLCJzZWFyY2hCYXIiLCJzdWJtaXRCdXR0b24iLCJjaGFuZ2VUZXh0Il0sInNvdXJjZXMiOlsiYmFzZS5zdGVwcy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHthY3QsIGZpcmVFdmVudCwgcmVuZGVyLCB3YWl0Rm9yfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCAncmVhY3QtbmF0aXZlLWdldC1yYW5kb20tdmFsdWVzJztcclxuaW1wb3J0IHt2NCBhcyB1dWlkdjR9IGZyb20gJ3V1aWQnO1xyXG5pbXBvcnQge2xvYWRGZWF0dXJlLCBkZWZpbmVGZWF0dXJlfSBmcm9tICdqZXN0LWN1Y3VtYmVyJztcclxuaW1wb3J0IHtWaWV3LCBUZXh0SW5wdXQsIEJ1dHRvbn0gZnJvbSAncmVhY3QtbmF0aXZlJztcclxuaW1wb3J0IHt1c2VOYXZpZ2F0aW9ufSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnO1xyXG5pbXBvcnQge05hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3B9IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZS1zdGFjayc7XHJcbmltcG9ydCBCYXNlIGZyb20gJy4vLi4vLi4vQmFzZSc7XHJcbmNvbnN0IHV1aWQgPSB1dWlkdjQoKTtcclxuY29uc3QgZmVhdHVyZSA9IGxvYWRGZWF0dXJlKCdBcHBzL2ZlYXR1cmVzL2Jhc2UuZmVhdHVyZScpO1xyXG5jb25zdCBuYXZpZ2F0aW9uID0gdXNlTmF2aWdhdGlvbjxOYXRpdmVTdGFja05hdmlnYXRpb25Qcm9wPGFueT4+KCk7XHJcblxyXG5qZXN0Lm1vY2soJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZScsICgpID0+IHtcclxuICByZXR1cm4ge1xyXG4gICAgdXNlTmF2aWdhdGlvbjogamVzdC5mbigpLm1vY2tSZXR1cm5WYWx1ZSh7XHJcbiAgICAgIG5hdmlnYXRlOiBqZXN0LmZuKCksXHJcbiAgICB9KSxcclxuICB9O1xyXG59KTtcclxubGV0IHNjcmVlbjogYW55O1xyXG5kZWZpbmVGZWF0dXJlKGZlYXR1cmUsIHRlc3QgPT4ge1xyXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xyXG4gICAgc2NyZWVuID0gcmVuZGVyKDxCYXNlIC8+KTtcclxuICB9KTtcclxuICB0ZXN0KCdTZWFyY2ggZm9yIGEgbW92aWUnLCAoe2dpdmVuLCB3aGVuLCBhbmQsIHRoZW59KSA9PiB7XHJcbiAgICBnaXZlbignSSBhbSBvbiB0aGUgc2VhcmNoIHBhZ2UnLCAoKSA9PiB7XHJcbiAgICAgIGV4cGVjdChzY3JlZW4pLnRvQmVUcnV0aHkoKTtcclxuICAgIH0pO1xyXG4gICAgd2hlbignSSBzZWxlY3QgdGhlIFwiTW92aWVcIiB0YWInLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IG1vdmllVGFiID0gc2NyZWVuLmdldEJ5VGVzdElkKCdtb3ZpZS10YWInKTtcclxuICAgICAgYWN0KCgpID0+IHtcclxuICAgICAgICBmaXJlRXZlbnQucHJlc3MobW92aWVUYWIpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgYW5kKCdJIGVudGVyIFwiTWFubWFkaHVkdVwiIGluIHRoZSBzZWFyY2ggaW5wdXQgYW5kIGhpdCBzdWJtaXQnLCAoKSA9PiB7XHJcbiAgICAgIGNvbnN0IHNlYXJjaEJhciA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnc2VhcmNoLW1vdmllJyk7XHJcbiAgICAgIGNvbnN0IHN1Ym1pdEJ1dHRvbiA9IHNjcmVlbi5nZXRCeVRlc3RJZCgnc3VibWl0LWJ1dHRvbicpO1xyXG4gICAgICBhY3QoKCkgPT4ge1xyXG4gICAgICAgIGZpcmVFdmVudC5jaGFuZ2VUZXh0KHNlYXJjaEJhciwgJ01hbm1hZGh1ZHUnKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGVuKCdJIHNob3VsZCBzZWUgdGhlIHNlYXJjaCByZXN1bHRzIGNhcmQnLCAoKSA9PiB7fSk7XHJcblxyXG4gICAgYW5kKCdJIHNob3VsZCBiZSBhYmxlIHRvIGNsaWNrIHRoZSBjYXJkIHRvIHZpZXcgbW9yZSBkZXRhaWxzJywgKCkgPT4ge30pO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiQUFZQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsWUFBTTtFQUMxQyxPQUFPO0lBQ0xDLGFBQWEsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLEVBQUUsQ0FBQ0MsZUFBZSxDQUFDO01BQ3ZDQyxRQUFRLEVBQUVILElBQUksQ0FBQ0MsRUFBRTtJQUNuQixDQUFDO0VBQ0gsQ0FBQztBQUNILENBQUMsQ0FBQztBQUFDLElBQUFHLHNCQUFBLEdBQUFDLE9BQUE7QUFsQkgsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0FBLE9BQUE7QUFDQSxJQUFBRSxLQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxhQUFBLEdBQUFILE9BQUE7QUFFQSxJQUFBSSxPQUFBLEdBQUFKLE9BQUE7QUFFQSxJQUFBSyxLQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFBZ0MsSUFBQU0sV0FBQSxHQUFBTixPQUFBO0FBQUEsU0FBQVIsWUFBQTtFQUFBLElBQUFlLFFBQUEsR0FBQVAsT0FBQTtJQUFBTCxJQUFBLEdBQUFZLFFBQUEsQ0FBQVosSUFBQTtFQUFBSCxXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBRyxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFDaEMsSUFBTWEsSUFBSSxHQUFHLElBQUFDLFFBQU0sR0FBRTtBQUNyQixJQUFNQyxPQUFPLEdBQUcsSUFBQUMseUJBQVcsRUFBQyw0QkFBNEIsQ0FBQztBQUN6RCxJQUFNQyxVQUFVLEdBQUcsSUFBQWxCLHFCQUFhLEdBQWtDO0FBU2xFLElBQUltQixNQUFXO0FBQ2YsSUFBQUMsMkJBQWEsRUFBQ0osT0FBTyxFQUFFLFVBQUFLLElBQUksRUFBSTtFQUM3QkMsVUFBVSxDQUFDLFlBQU07SUFDZkgsTUFBTSxHQUFHLElBQUFJLG1CQUFNLEVBQUMsSUFBQVgsV0FBQSxDQUFBWSxHQUFBLEVBQUNiLEtBQUEsQ0FBQWMsT0FBSSxLQUFHLENBQUM7RUFDM0IsQ0FBQyxDQUFDO0VBQ0ZKLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxVQUFBSyxJQUFBLEVBQThCO0lBQUEsSUFBNUJDLEtBQUssR0FBQUQsSUFBQSxDQUFMQyxLQUFLO01BQUVDLElBQUksR0FBQUYsSUFBQSxDQUFKRSxJQUFJO01BQUVDLEdBQUcsR0FBQUgsSUFBQSxDQUFIRyxHQUFHO01BQUVDLElBQUksR0FBQUosSUFBQSxDQUFKSSxJQUFJO0lBQ2pESCxLQUFLLENBQUMseUJBQXlCLEVBQUUsWUFBTTtNQUNyQ0ksTUFBTSxDQUFDWixNQUFNLENBQUMsQ0FBQ2EsVUFBVSxFQUFFO0lBQzdCLENBQUMsQ0FBQztJQUNGSixJQUFJLENBQUMsMEJBQTBCLEVBQUUsWUFBTTtNQUNyQyxJQUFNSyxRQUFRLEdBQUdkLE1BQU0sQ0FBQ2UsV0FBVyxDQUFDLFdBQVcsQ0FBQztNQUNoRCxJQUFBQyxnQkFBRyxFQUFDLFlBQU07UUFDUkMsc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDSixRQUFRLENBQUM7TUFDM0IsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDO0lBQ0ZKLEdBQUcsQ0FBQyx5REFBeUQsRUFBRSxZQUFNO01BQ25FLElBQU1TLFNBQVMsR0FBR25CLE1BQU0sQ0FBQ2UsV0FBVyxDQUFDLGNBQWMsQ0FBQztNQUNwRCxJQUFNSyxZQUFZLEdBQUdwQixNQUFNLENBQUNlLFdBQVcsQ0FBQyxlQUFlLENBQUM7TUFDeEQsSUFBQUMsZ0JBQUcsRUFBQyxZQUFNO1FBQ1JDLHNCQUFTLENBQUNJLFVBQVUsQ0FBQ0YsU0FBUyxFQUFFLFlBQVksQ0FBQztNQUMvQyxDQUFDLENBQUM7SUFDSixDQUFDLENBQUM7SUFFRlIsSUFBSSxDQUFDLHNDQUFzQyxFQUFFLFlBQU0sQ0FBQyxDQUFDLENBQUM7SUFFdERELEdBQUcsQ0FBQyx5REFBeUQsRUFBRSxZQUFNLENBQUMsQ0FBQyxDQUFDO0VBQzFFLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQyJ9