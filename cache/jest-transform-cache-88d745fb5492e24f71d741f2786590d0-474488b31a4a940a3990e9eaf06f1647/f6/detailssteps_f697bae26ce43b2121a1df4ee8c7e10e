d523b494920f826afa1e89c1d71741db
_getJestObj().mock('axios');
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactNative = require("@testing-library/react-native");
require("react-native-get-random-values");
var _uuid = require("uuid");
var _jestCucumber = require("jest-cucumber");
var _native = require("@react-navigation/native");
var _Details = _interopRequireDefault(require("../../Details"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var uuid = (0, _uuid.v4)();
var feature = (0, _jestCucumber.loadFeature)('Apps/features/details.feature');
var navigation = (0, _native.useNavigation)();
var screen;
(0, _jestCucumber.defineFeature)(feature, function (test) {
  test('Display details of a movie', function (_ref) {
    var given = _ref.given,
      when = _ref.when,
      and = _ref.and,
      then = _ref.then;
    screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Details.default, {}));
    given('I am on the details page', function () {});
    then('I should see the title "Manmadhudu"', function () {});
    and('I should see the release year "2002"', function () {});
    and('I should see the genre "Comedy, Romance"', function () {});
    and('I should see the rated "N/A"', function () {});
    and('I should see the plot "A misogynist is forced by circumstances to work with a woman."', function () {});
    and('I should see the actors "Nagarjuna Akkineni, Sonali Bendre, Anshu"', function () {});
    and('I should see the ratings', function () {});
    and('I should not see the episodes', function () {});
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VOYXZpZ2F0aW9uIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwibmF2aWdhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl91dWlkIiwiX2plc3RDdWN1bWJlciIsIl9uYXRpdmUiLCJfRGV0YWlscyIsIl9qc3hSdW50aW1lIiwiX3JlcXVpcmUiLCJ1dWlkIiwidXVpZHY0IiwiZmVhdHVyZSIsImxvYWRGZWF0dXJlIiwibmF2aWdhdGlvbiIsInNjcmVlbiIsImRlZmluZUZlYXR1cmUiLCJ0ZXN0IiwiX3JlZiIsImdpdmVuIiwid2hlbiIsImFuZCIsInRoZW4iLCJyZW5kZXIiLCJqc3giLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiZGV0YWlscy5zdGVwcy50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHthY3QsIGZpcmVFdmVudCwgcmVuZGVyLCB3YWl0Rm9yfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0LW5hdGl2ZSc7XHJcbmltcG9ydCAncmVhY3QtbmF0aXZlLWdldC1yYW5kb20tdmFsdWVzJztcclxuaW1wb3J0IHt2NCBhcyB1dWlkdjR9IGZyb20gJ3V1aWQnO1xyXG5pbXBvcnQge2xvYWRGZWF0dXJlLCBkZWZpbmVGZWF0dXJlfSBmcm9tICdqZXN0LWN1Y3VtYmVyJztcclxuaW1wb3J0IHt1c2VOYXZpZ2F0aW9ufSBmcm9tICdAcmVhY3QtbmF2aWdhdGlvbi9uYXRpdmUnO1xyXG5pbXBvcnQge05hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3B9IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZS1zdGFjayc7XHJcbmltcG9ydCBEZXRhaWxzIGZyb20gJy4uLy4uL0RldGFpbHMnO1xyXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xyXG5jb25zdCB1dWlkID0gdXVpZHY0KCk7XHJcbmNvbnN0IGZlYXR1cmUgPSBsb2FkRmVhdHVyZSgnQXBwcy9mZWF0dXJlcy9kZXRhaWxzLmZlYXR1cmUnKTtcclxuY29uc3QgbmF2aWdhdGlvbiA9IHVzZU5hdmlnYXRpb248TmF0aXZlU3RhY2tOYXZpZ2F0aW9uUHJvcDxhbnk+PigpO1xyXG5qZXN0Lm1vY2soJ2F4aW9zJyk7XHJcbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICB1c2VOYXZpZ2F0aW9uOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcclxuICAgICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcclxuICAgIH0pLFxyXG4gIH07XHJcbn0pO1xyXG5sZXQgc2NyZWVuOiBhbnk7XHJcbmRlZmluZUZlYXR1cmUoZmVhdHVyZSwgdGVzdCA9PiB7XHJcbiAgdGVzdCgnRGlzcGxheSBkZXRhaWxzIG9mIGEgbW92aWUnLCAoe2dpdmVuLCB3aGVuLCBhbmQsIHRoZW59KSA9PiB7XHJcbiAgICBzY3JlZW4gPSByZW5kZXIoPERldGFpbHMgLz4pO1xyXG5cclxuICAgIGdpdmVuKCdJIGFtIG9uIHRoZSBkZXRhaWxzIHBhZ2UnLCAoKSA9PiB7fSk7XHJcbiAgICB0aGVuKCdJIHNob3VsZCBzZWUgdGhlIHRpdGxlIFwiTWFubWFkaHVkdVwiJywgKCkgPT4ge30pO1xyXG4gICAgYW5kKCdJIHNob3VsZCBzZWUgdGhlIHJlbGVhc2UgeWVhciBcIjIwMDJcIicsICgpID0+IHt9KTtcclxuXHJcbiAgICBhbmQoJ0kgc2hvdWxkIHNlZSB0aGUgZ2VucmUgXCJDb21lZHksIFJvbWFuY2VcIicsICgpID0+IHt9KTtcclxuXHJcbiAgICBhbmQoJ0kgc2hvdWxkIHNlZSB0aGUgcmF0ZWQgXCJOL0FcIicsICgpID0+IHt9KTtcclxuICAgIGFuZChcclxuICAgICAgJ0kgc2hvdWxkIHNlZSB0aGUgcGxvdCBcIkEgbWlzb2d5bmlzdCBpcyBmb3JjZWQgYnkgY2lyY3Vtc3RhbmNlcyB0byB3b3JrIHdpdGggYSB3b21hbi5cIicsXHJcbiAgICAgICgpID0+IHt9LFxyXG4gICAgKTtcclxuICAgIGFuZChcclxuICAgICAgJ0kgc2hvdWxkIHNlZSB0aGUgYWN0b3JzIFwiTmFnYXJqdW5hIEFra2luZW5pLCBTb25hbGkgQmVuZHJlLCBBbnNodVwiJyxcclxuICAgICAgKCkgPT4ge30sXHJcbiAgICApO1xyXG4gICAgYW5kKCdJIHNob3VsZCBzZWUgdGhlIHJhdGluZ3MnLCAoKSA9PiB7fSk7XHJcbiAgICBhbmQoJ0kgc2hvdWxkIG5vdCBzZWUgdGhlIGVwaXNvZGVzJywgKCkgPT4ge30pO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiQUFXQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsT0FBTyxDQUFDO0FBQ2xCRCxXQUFBLEdBQUtDLElBQUksQ0FBQywwQkFBMEIsRUFBRSxZQUFNO0VBQzFDLE9BQU87SUFDTEMsYUFBYSxFQUFFQyxJQUFJLENBQUNDLEVBQUUsRUFBRSxDQUFDQyxlQUFlLENBQUM7TUFDdkNDLFFBQVEsRUFBRUgsSUFBSSxDQUFDQyxFQUFFO0lBQ25CLENBQUM7RUFDSCxDQUFDO0FBQ0gsQ0FBQyxDQUFDO0FBQUMsSUFBQUcsc0JBQUEsR0FBQUMsT0FBQTtBQWxCSCxJQUFBQyxZQUFBLEdBQUFELE9BQUE7QUFDQUEsT0FBQTtBQUNBLElBQUFFLEtBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLGFBQUEsR0FBQUgsT0FBQTtBQUNBLElBQUFJLE9BQUEsR0FBQUosT0FBQTtBQUVBLElBQUFLLFFBQUEsR0FBQU4sc0JBQUEsQ0FBQUMsT0FBQTtBQUFvQyxJQUFBTSxXQUFBLEdBQUFOLE9BQUE7QUFBQSxTQUFBUixZQUFBO0VBQUEsSUFBQWUsUUFBQSxHQUFBUCxPQUFBO0lBQUFMLElBQUEsR0FBQVksUUFBQSxDQUFBWixJQUFBO0VBQUFILFdBQUEsWUFBQUEsWUFBQTtJQUFBLE9BQUFHLElBQUE7RUFBQTtFQUFBLE9BQUFBLElBQUE7QUFBQTtBQUVwQyxJQUFNYSxJQUFJLEdBQUcsSUFBQUMsUUFBTSxHQUFFO0FBQ3JCLElBQU1DLE9BQU8sR0FBRyxJQUFBQyx5QkFBVyxFQUFDLCtCQUErQixDQUFDO0FBQzVELElBQU1DLFVBQVUsR0FBRyxJQUFBbEIscUJBQWEsR0FBa0M7QUFTbEUsSUFBSW1CLE1BQVc7QUFDZixJQUFBQywyQkFBYSxFQUFDSixPQUFPLEVBQUUsVUFBQUssSUFBSSxFQUFJO0VBQzdCQSxJQUFJLENBQUMsNEJBQTRCLEVBQUUsVUFBQUMsSUFBQSxFQUE4QjtJQUFBLElBQTVCQyxLQUFLLEdBQUFELElBQUEsQ0FBTEMsS0FBSztNQUFFQyxJQUFJLEdBQUFGLElBQUEsQ0FBSkUsSUFBSTtNQUFFQyxHQUFHLEdBQUFILElBQUEsQ0FBSEcsR0FBRztNQUFFQyxJQUFJLEdBQUFKLElBQUEsQ0FBSkksSUFBSTtJQUN6RFAsTUFBTSxHQUFHLElBQUFRLG1CQUFNLEVBQUMsSUFBQWYsV0FBQSxDQUFBZ0IsR0FBQSxFQUFDakIsUUFBQSxDQUFBa0IsT0FBTyxLQUFHLENBQUM7SUFFNUJOLEtBQUssQ0FBQywwQkFBMEIsRUFBRSxZQUFNLENBQUMsQ0FBQyxDQUFDO0lBQzNDRyxJQUFJLENBQUMscUNBQXFDLEVBQUUsWUFBTSxDQUFDLENBQUMsQ0FBQztJQUNyREQsR0FBRyxDQUFDLHNDQUFzQyxFQUFFLFlBQU0sQ0FBQyxDQUFDLENBQUM7SUFFckRBLEdBQUcsQ0FBQywwQ0FBMEMsRUFBRSxZQUFNLENBQUMsQ0FBQyxDQUFDO0lBRXpEQSxHQUFHLENBQUMsOEJBQThCLEVBQUUsWUFBTSxDQUFDLENBQUMsQ0FBQztJQUM3Q0EsR0FBRyxDQUNELHVGQUF1RixFQUN2RixZQUFNLENBQUMsQ0FBQyxDQUNUO0lBQ0RBLEdBQUcsQ0FDRCxvRUFBb0UsRUFDcEUsWUFBTSxDQUFDLENBQUMsQ0FDVDtJQUNEQSxHQUFHLENBQUMsMEJBQTBCLEVBQUUsWUFBTSxDQUFDLENBQUMsQ0FBQztJQUN6Q0EsR0FBRyxDQUFDLCtCQUErQixFQUFFLFlBQU0sQ0FBQyxDQUFDLENBQUM7RUFDaEQsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=