2c2a0a4ed68aa77505c5f85ca35bd5d7
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _jsxRuntime = require("react/jsx-runtime");
var Details = function Details(_ref) {
  var route = _ref.route;
  var _route$params$state = route.params.state,
    Title = _route$params$state.Title,
    Actors = _route$params$state.Actors,
    Awards = _route$params$state.Awards,
    BoxOffice = _route$params$state.BoxOffice,
    Plot = _route$params$state.Plot,
    Poster = _route$params$state.Poster,
    Rated = _route$params$state.Rated,
    Ratings = _route$params$state.Ratings,
    Genre = _route$params$state.Genre,
    Episodes = _route$params$state.Episodes,
    Year = _route$params$state.Year;
  console.log(route);
  return (0, _jsxRuntime.jsx)(_reactNative.ScrollView, {
    style: {
      backgroundColor: '#14181f',
      minHeight: '100%'
    },
    children: (0, _jsxRuntime.jsx)(_reactNative.View, {
      style: {
        padding: 20,
        backgroundColor: 'white'
      },
      children: (0, _jsxRuntime.jsxs)(_reactNative.View, {
        style: {
          padding: 20,
          maxWidth: 800,
          width: '100%',
          borderRadius: 16,
          backgroundColor: '#21272B',
          alignSelf: 'center',
          marginBottom: 20
        },
        children: [(0, _jsxRuntime.jsxs)(_reactNative.View, {
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.textStyling,
            testID: "movie-title",
            children: Title
          }), (0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.textStyling,
            children: Year
          })]
        }), Poster && (0, _jsxRuntime.jsx)(_reactNative.Image, {
          source: {
            uri: Poster
          },
          alt: Title,
          style: {
            maxWidth: 300,
            height: 200,
            marginBottom: 20,
            borderRadius: 16,
            marginTop: 16
          }
        }), Genre && (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: styles.textSubStyling,
          children: ["Genre: ", Genre]
        }), Rated && (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: styles.textSubStyling,
          children: ["Rated: ", Rated]
        }), Plot && (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: {
            marginBottom: 20,
            color: 'white'
          },
          children: Plot
        }), Actors && (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: styles.textSubStyling,
          children: ["Actors: ", Actors]
        }), Awards && (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: styles.textSubStyling,
          children: ["Awards: ", Awards]
        }), BoxOffice && Episodes && (0, _jsxRuntime.jsxs)(_reactNative.Text, {
          style: styles.textSubStyling,
          children: ["Box Office: ", BoxOffice]
        }), Ratings && Ratings.length > 0 && (0, _jsxRuntime.jsx)(_reactNative.Text, {
          style: styles.textSubStyling,
          children: "Ratings:"
        }), Ratings && Ratings.length > 0 && (0, _jsxRuntime.jsx)(_reactNative.View, {
          style: {
            marginLeft: 20,
            marginBottom: 20
          },
          children: Ratings.map(function (rating, index) {
            return (0, _jsxRuntime.jsxs)(_reactNative.Text, {
              style: {
                color: 'white'
              },
              children: [rating.Source, ": ", rating.Value]
            }, index);
          })
        }), Episodes && (0, _jsxRuntime.jsxs)(_reactNative.View, {
          style: {
            marginBottom: 20
          },
          children: [(0, _jsxRuntime.jsx)(_reactNative.Text, {
            style: styles.textSubStyling,
            children: "Episodes:"
          }), (0, _jsxRuntime.jsx)(_reactNative.View, {
            style: {
              marginLeft: 20
            },
            children: Episodes.map(function (episode) {
              return (0, _jsxRuntime.jsxs)(_reactNative.View, {
                children: [(0, _jsxRuntime.jsxs)(_reactNative.Text, {
                  style: {
                    fontSize: 16
                  },
                  children: [episode.Title, " (", episode.Released, ")"]
                }), (0, _jsxRuntime.jsxs)(_reactNative.Text, {
                  style: {
                    fontSize: 14
                  },
                  children: ["Episode: ", episode.Episode, ", IMDB Rating:", ' ', episode.imdbRating]
                })]
              }, episode.imdbID);
            })
          })]
        })]
      })
    })
  });
};
var styles = _reactNative.StyleSheet.create({
  textStyling: {
    fontSize: 24,
    marginBottom: 10,
    color: 'white'
  },
  textSubStyling: {
    fontSize: 18,
    marginBottom: 10,
    color: 'white'
  }
});
var _default = Details;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,