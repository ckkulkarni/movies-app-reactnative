54fb870be53a14f27b988dce11901cab
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _reactNative = require("@testing-library/react-native");
require("react-native-get-random-values");
var _uuid = require("uuid");
var _jestCucumber = require("jest-cucumber");
var _native = require("@react-navigation/native");
var _Base = _interopRequireDefault(require("./../../Base"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var uuid = (0, _uuid.v4)();
var feature = (0, _jestCucumber.loadFeature)('Apps/features/base.feature');
var navigation = (0, _native.useNavigation)();
var screen;
(0, _jestCucumber.defineFeature)(feature, function (test) {
  beforeEach(function () {
    screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {}));
  });
  test('Search for a movie', function (_ref) {
    var given = _ref.given,
      when = _ref.when,
      and = _ref.and,
      then = _ref.then;
    given('I am on the search page', function () {
      expect(screen).toBeTruthy();
    });
    when('I select the "Movie" tab', function () {
      var movieTab = screen.getByTestId('movie-tab');
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.press(movieTab);
      });
    });
    and('I enter "Manmadhudu" in the search input and hit submit', function () {});
    then('I should see the search results card', function () {});
    and('I should be able to click the card to view more details', function () {});
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZ2V0SmVzdE9iaiIsIm1vY2siLCJ1c2VOYXZpZ2F0aW9uIiwiamVzdCIsImZuIiwibW9ja1JldHVyblZhbHVlIiwibmF2aWdhdGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl91dWlkIiwiX2plc3RDdWN1bWJlciIsIl9uYXRpdmUiLCJfQmFzZSIsIl9qc3hSdW50aW1lIiwiX3JlcXVpcmUiLCJ1dWlkIiwidXVpZHY0IiwiZmVhdHVyZSIsImxvYWRGZWF0dXJlIiwibmF2aWdhdGlvbiIsInNjcmVlbiIsImRlZmluZUZlYXR1cmUiLCJ0ZXN0IiwiYmVmb3JlRWFjaCIsInJlbmRlciIsImpzeCIsImRlZmF1bHQiLCJfcmVmIiwiZ2l2ZW4iLCJ3aGVuIiwiYW5kIiwidGhlbiIsImV4cGVjdCIsInRvQmVUcnV0aHkiLCJtb3ZpZVRhYiIsImdldEJ5VGVzdElkIiwiYWN0IiwiZmlyZUV2ZW50IiwicHJlc3MiXSwic291cmNlcyI6WyJiYXNlLnN0ZXBzLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2FjdCwgZmlyZUV2ZW50LCByZW5kZXIsIHdhaXRGb3J9IGZyb20gJ0B0ZXN0aW5nLWxpYnJhcnkvcmVhY3QtbmF0aXZlJztcclxuaW1wb3J0ICdyZWFjdC1uYXRpdmUtZ2V0LXJhbmRvbS12YWx1ZXMnO1xyXG5pbXBvcnQge3Y0IGFzIHV1aWR2NH0gZnJvbSAndXVpZCc7XHJcbmltcG9ydCB7bG9hZEZlYXR1cmUsIGRlZmluZUZlYXR1cmV9IGZyb20gJ2plc3QtY3VjdW1iZXInO1xyXG5pbXBvcnQge1ZpZXcsIFRleHRJbnB1dCwgQnV0dG9ufSBmcm9tICdyZWFjdC1uYXRpdmUnO1xyXG5pbXBvcnQge3VzZU5hdmlnYXRpb259IGZyb20gJ0ByZWFjdC1uYXZpZ2F0aW9uL25hdGl2ZSc7XHJcbmltcG9ydCB7TmF0aXZlU3RhY2tOYXZpZ2F0aW9uUHJvcH0gZnJvbSAnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlLXN0YWNrJztcclxuaW1wb3J0IEJhc2UgZnJvbSAnLi8uLi8uLi9CYXNlJztcclxuY29uc3QgdXVpZCA9IHV1aWR2NCgpO1xyXG5jb25zdCBmZWF0dXJlID0gbG9hZEZlYXR1cmUoJ0FwcHMvZmVhdHVyZXMvYmFzZS5mZWF0dXJlJyk7XHJcbmNvbnN0IG5hdmlnYXRpb24gPSB1c2VOYXZpZ2F0aW9uPE5hdGl2ZVN0YWNrTmF2aWdhdGlvblByb3A8YW55Pj4oKTtcclxuXHJcbmplc3QubW9jaygnQHJlYWN0LW5hdmlnYXRpb24vbmF0aXZlJywgKCkgPT4ge1xyXG4gIHJldHVybiB7XHJcbiAgICB1c2VOYXZpZ2F0aW9uOiBqZXN0LmZuKCkubW9ja1JldHVyblZhbHVlKHtcclxuICAgICAgbmF2aWdhdGU6IGplc3QuZm4oKSxcclxuICAgIH0pLFxyXG4gIH07XHJcbn0pO1xyXG5sZXQgc2NyZWVuOiBhbnk7XHJcbmRlZmluZUZlYXR1cmUoZmVhdHVyZSwgdGVzdCA9PiB7XHJcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XHJcbiAgICBzY3JlZW4gPSByZW5kZXIoPEJhc2UgLz4pO1xyXG4gIH0pO1xyXG4gIHRlc3QoJ1NlYXJjaCBmb3IgYSBtb3ZpZScsICh7Z2l2ZW4sIHdoZW4sIGFuZCwgdGhlbn0pID0+IHtcclxuICAgIGdpdmVuKCdJIGFtIG9uIHRoZSBzZWFyY2ggcGFnZScsICgpID0+IHtcclxuICAgICAgZXhwZWN0KHNjcmVlbikudG9CZVRydXRoeSgpO1xyXG4gICAgfSk7XHJcbiAgICB3aGVuKCdJIHNlbGVjdCB0aGUgXCJNb3ZpZVwiIHRhYicsICgpID0+IHtcclxuICAgICAgY29uc3QgbW92aWVUYWIgPSBzY3JlZW4uZ2V0QnlUZXN0SWQoJ21vdmllLXRhYicpO1xyXG4gICAgICBhY3QoKCkgPT4ge1xyXG4gICAgICAgIGZpcmVFdmVudC5wcmVzcyhtb3ZpZVRhYik7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBhbmQoJ0kgZW50ZXIgXCJNYW5tYWRodWR1XCIgaW4gdGhlIHNlYXJjaCBpbnB1dCBhbmQgaGl0IHN1Ym1pdCcsICgpID0+IHt9KTtcclxuXHJcbiAgICB0aGVuKCdJIHNob3VsZCBzZWUgdGhlIHNlYXJjaCByZXN1bHRzIGNhcmQnLCAoKSA9PiB7fSk7XHJcblxyXG4gICAgYW5kKCdJIHNob3VsZCBiZSBhYmxlIHRvIGNsaWNrIHRoZSBjYXJkIHRvIHZpZXcgbW9yZSBkZXRhaWxzJywgKCkgPT4ge30pO1xyXG4gIH0pO1xyXG59KTtcclxuIl0sIm1hcHBpbmdzIjoiQUFZQUEsV0FBQSxHQUFLQyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsWUFBTTtFQUMxQyxPQUFPO0lBQ0xDLGFBQWEsRUFBRUMsSUFBSSxDQUFDQyxFQUFFLEVBQUUsQ0FBQ0MsZUFBZSxDQUFDO01BQ3ZDQyxRQUFRLEVBQUVILElBQUksQ0FBQ0MsRUFBRTtJQUNuQixDQUFDO0VBQ0gsQ0FBQztBQUNILENBQUMsQ0FBQztBQUFDLElBQUFHLHNCQUFBLEdBQUFDLE9BQUE7QUFsQkgsSUFBQUMsWUFBQSxHQUFBRCxPQUFBO0FBQ0FBLE9BQUE7QUFDQSxJQUFBRSxLQUFBLEdBQUFGLE9BQUE7QUFDQSxJQUFBRyxhQUFBLEdBQUFILE9BQUE7QUFFQSxJQUFBSSxPQUFBLEdBQUFKLE9BQUE7QUFFQSxJQUFBSyxLQUFBLEdBQUFOLHNCQUFBLENBQUFDLE9BQUE7QUFBZ0MsSUFBQU0sV0FBQSxHQUFBTixPQUFBO0FBQUEsU0FBQVIsWUFBQTtFQUFBLElBQUFlLFFBQUEsR0FBQVAsT0FBQTtJQUFBTCxJQUFBLEdBQUFZLFFBQUEsQ0FBQVosSUFBQTtFQUFBSCxXQUFBLFlBQUFBLFlBQUE7SUFBQSxPQUFBRyxJQUFBO0VBQUE7RUFBQSxPQUFBQSxJQUFBO0FBQUE7QUFDaEMsSUFBTWEsSUFBSSxHQUFHLElBQUFDLFFBQU0sR0FBRTtBQUNyQixJQUFNQyxPQUFPLEdBQUcsSUFBQUMseUJBQVcsRUFBQyw0QkFBNEIsQ0FBQztBQUN6RCxJQUFNQyxVQUFVLEdBQUcsSUFBQWxCLHFCQUFhLEdBQWtDO0FBU2xFLElBQUltQixNQUFXO0FBQ2YsSUFBQUMsMkJBQWEsRUFBQ0osT0FBTyxFQUFFLFVBQUFLLElBQUksRUFBSTtFQUM3QkMsVUFBVSxDQUFDLFlBQU07SUFDZkgsTUFBTSxHQUFHLElBQUFJLG1CQUFNLEVBQUMsSUFBQVgsV0FBQSxDQUFBWSxHQUFBLEVBQUNiLEtBQUEsQ0FBQWMsT0FBSSxLQUFHLENBQUM7RUFDM0IsQ0FBQyxDQUFDO0VBQ0ZKLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxVQUFBSyxJQUFBLEVBQThCO0lBQUEsSUFBNUJDLEtBQUssR0FBQUQsSUFBQSxDQUFMQyxLQUFLO01BQUVDLElBQUksR0FBQUYsSUFBQSxDQUFKRSxJQUFJO01BQUVDLEdBQUcsR0FBQUgsSUFBQSxDQUFIRyxHQUFHO01BQUVDLElBQUksR0FBQUosSUFBQSxDQUFKSSxJQUFJO0lBQ2pESCxLQUFLLENBQUMseUJBQXlCLEVBQUUsWUFBTTtNQUNyQ0ksTUFBTSxDQUFDWixNQUFNLENBQUMsQ0FBQ2EsVUFBVSxFQUFFO0lBQzdCLENBQUMsQ0FBQztJQUNGSixJQUFJLENBQUMsMEJBQTBCLEVBQUUsWUFBTTtNQUNyQyxJQUFNSyxRQUFRLEdBQUdkLE1BQU0sQ0FBQ2UsV0FBVyxDQUFDLFdBQVcsQ0FBQztNQUNoRCxJQUFBQyxnQkFBRyxFQUFDLFlBQU07UUFDUkMsc0JBQVMsQ0FBQ0MsS0FBSyxDQUFDSixRQUFRLENBQUM7TUFDM0IsQ0FBQyxDQUFDO0lBQ0osQ0FBQyxDQUFDO0lBQ0ZKLEdBQUcsQ0FBQyx5REFBeUQsRUFBRSxZQUFNLENBQUMsQ0FBQyxDQUFDO0lBRXhFQyxJQUFJLENBQUMsc0NBQXNDLEVBQUUsWUFBTSxDQUFDLENBQUMsQ0FBQztJQUV0REQsR0FBRyxDQUFDLHlEQUF5RCxFQUFFLFlBQU0sQ0FBQyxDQUFDLENBQUM7RUFDMUUsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDIn0=