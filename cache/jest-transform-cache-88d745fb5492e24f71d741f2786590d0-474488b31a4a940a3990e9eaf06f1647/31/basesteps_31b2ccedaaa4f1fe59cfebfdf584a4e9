8e6ca8e92fcc3145142040e172470336
_getJestObj().mock('axios');
_getJestObj().mock('@react-navigation/native', function () {
  return {
    useNavigation: jest.fn().mockReturnValue({
      navigate: jest.fn()
    })
  };
});
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _reactNative = require("@testing-library/react-native");
require("react-native-get-random-values");
var _uuid = require("uuid");
var _jestCucumber = require("jest-cucumber");
var _native = require("@react-navigation/native");
var _Base = _interopRequireDefault(require("./../../Base"));
var _axios = _interopRequireDefault(require("axios"));
var _jsxRuntime = require("react/jsx-runtime");
function _getJestObj() {
  var _require = require("@jest/globals"),
    jest = _require.jest;
  _getJestObj = function _getJestObj() {
    return jest;
  };
  return jest;
}
var uuid = (0, _uuid.v4)();
var feature = (0, _jestCucumber.loadFeature)('Apps/features/base.feature');
var navigation = (0, _native.useNavigation)();
var screen;
(0, _jestCucumber.defineFeature)(feature, function (test) {
  beforeEach(function () {
    screen = (0, _reactNative.render)((0, _jsxRuntime.jsx)(_Base.default, {}));
  });
  test('Search for a movie', function (_ref) {
    var given = _ref.given,
      when = _ref.when,
      and = _ref.and,
      then = _ref.then;
    given('I am on the search page', function () {
      expect(screen).toBeTruthy();
    });
    when('I select the "Movie" tab', function () {
      var movieTab = screen.getByTestId('movie-tab');
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.press(movieTab);
      });
    });
    and('I enter "Manmadhudu" in the search input and hit submit', function () {
      var searchBar = screen.getByTestId('search-movie');
      var submitButton = screen.getByTestId('submit-button');
      (0, _reactNative.act)(function () {
        _reactNative.fireEvent.changeText(searchBar, 'Manmadhudu');
        _reactNative.fireEvent.press(submitButton);
      });
      _axios.default.get.mockResolvedValueOnce({
        data: {
          Title: 'Manmadhudu',
          Year: '2002',
          Rated: 'N/A',
          Released: '20 Dec 2002',
          Runtime: '142 min',
          Genre: 'Comedy, Romance',
          Director: 'Vijay K. Bhaskar',
          Writer: 'Vijay K. Bhaskar, Trivikram Srinivas',
          Actors: 'Nagarjuna Akkineni, Sonali Bendre, Anshu',
          Plot: 'A misogynist is forced by circumstances to work with a woman.',
          Language: 'Telugu',
          Poster: 'https://m.media-amazon.com/images/M/MV5BOTE1M2IwMzktNjI1Mi00ZTFkLTg4MmMtNTZmMjk4YTdhODlkXkEyXkFqcGdeQXVyNjE2NTgxOTE@._V1_SX300.jpg',
          Ratings: [{
            Source: 'Internet Movie Database',
            Value: '8.3/10'
          }],
          imdbRating: '8.3',
          imdbVotes: '4,096',
          imdbID: 'tt0355742'
        }
      });
    });
    then('I should see the search results card', (0, _asyncToGenerator2.default)(function* () {
      yield (0, _reactNative.waitFor)(function () {
        var movieTitle = screen.getByTestId('movie-title');
        console.log(movieTitle);
      });
    }));
    and('I should be able to click the card to view more details', function () {});
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,